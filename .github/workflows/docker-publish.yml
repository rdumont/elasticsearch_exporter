name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: rdumont/elasticsearch-exporter
  GOPATH: ${{ github.workspace }}
  GO111MODULE: off

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest
  
    defaults:
      run:
        working-directory: ${{ env.GOPATH }}/src/github.com/justwatchcom/elasticsearch_exporter

    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14

      - uses: actions/checkout@v2
        with:
          path: ${{ env.GOPATH }}/src/github.com/justwatchcom/elasticsearch_exporter
      
      - name: Set up build dependencies
        run: go get -u github.com/prometheus/promu
      
      - name: Build
        run: make build

      - name: Run tests
        run: make test

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'
  
    defaults:
      run:
        working-directory: ${{ env.GOPATH }}/src/github.com/justwatchcom/elasticsearch_exporter

    steps:
      - uses: actions/checkout@v2
        with:
          path: ${{ env.GOPATH }}/src/github.com/justwatchcom/elasticsearch_exporter
        
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
      
      - name: Set up build dependencies
        run: go get -u github.com/prometheus/promu

      - name: Build binary
        run: make build
        
      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login  -u rdumont --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
